<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reserva de Salas</title>
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://fullcalendar.io/releases/fullcalendar/5.10.1/main.min.css">

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <!-- FullCalendar CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">
    <!-- FullCalendar JS -->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/locale/pt-br.min.js"></script>
    <style>
        /* ... (outros estilos mantidos) ... */

        /* NOVOS ESTILOS PARA O CALENDÁRIO */
        #calendar {
            margin-top: 30px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }

        .fc-header-toolbar {
            margin-bottom: 1em;
        }

        .fc-daygrid-event {
            padding: 2px 4px;
            font-size: 0.85em;
            white-space: normal !important;
        }

        .fc-event-time {
            font-weight: bold;
        }

        /* Estilo para a legenda de cores */
        .color-legend {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 15px 0;
        }

        .color-legend-item {
            display: flex;
            align-items: center;
            margin-right: 15px;
        }

        .color-legend-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 5px;
            border: 1px solid #ddd;
        }

        /* Ajustes para telas menores */
        @media (max-width: 768px) {
            .fc-toolbar-title {
                font-size: 1.2em;
            }
            
            .fc-button {
                padding: 0.3em 0.6em;
                font-size: 0.8em;
            }
            
            .fc-daygrid-event {
                font-size: 0.7em;
                padding: 1px 2px;
            }
            
            .fc-header-toolbar {
                flex-direction: column;
                gap: 10px;
            }
            
            .fc-toolbar-chunk {
                display: flex;
                justify-content: center;
                width: 100%;
            }
        }

        /* Ajustes para telas muito pequenas */
        @media (max-width: 576px) {
            .fc-daygrid-day-frame {
                min-height: 60px !important;
            }
            
            .fc-daygrid-day-number {
                font-size: 0.8em;
            }
        }
    </style>
</head>
<body>
<div class="container mt-5">
    <!-- Título da página -->
    <h2 class="text-center text-primary my-4">Reserva de Salas</h2>

    <!-- Botão Cadastrar Reserva -->
    <div class="d-flex justify-content-end mb-3">
        <a href="/reservas/create" class="btn btn-success">
            <i class="bi bi-calendar-plus"></i> Cadastrar Reserva
        </a>
    </div>



    <!-- Formulário de Filtro -->
    <form action="/reservas" method="GET" class="mb-4 p-4 border rounded shadow-sm bg-light filter-form">
        <div class="row g-3">
            <!-- Campo de Data Inicial -->
            <div class="col-md-2 col-12">
                <input type="date" name="dataInicio" id="dataInicio" class="form-control" placeholder="Data inicial" value="{{query.dataInicio}}">
            </div>

            <!-- Campo de Data Final -->
            <div class="col-md-2 col-12">
                <input type="date" name="dataFim" id="dataFim" class="form-control" placeholder="Data final" value="{{query.dataFim}}">
            </div>

            <!-- Campo de Sala -->
            <div class="col-md-3 col-12">
                <select name="salaId" id="salaId" class="form-select">
                    <option value="">Todas as Salas</option>
                    {{#each salas}}
                        <option value="{{id}}" {{#if (eq id ../query.salaId)}}selected{{/if}}>{{nome}}</option>
                    {{/each}}
                </select>
            </div>

            <!-- Campo de Profissional -->
            <div class="col-md-3 col-12">
                <select name="profissionalId" id="profissionalId" class="form-select">
                    <option value="">Todos os Profissionais</option>
                    {{#each profissionais}}
                        <option value="{{id}}" {{#if (eq id ../query.profissionalId)}}selected{{/if}}>{{nome}}</option>
                    {{/each}}
                </select>
            </div>

            <!-- Botões -->
            <div class="col-md-2 col-12 d-flex justify-content-between">
                <button type="submit" class="btn btn-primary w-100 mb-2 mb-md-0">Filtrar</button>
                <a href="/reservas" class="btn btn-secondary w-100">Limpar</a>
            </div>
        </div>
    </form>

    <!-- Tabela de Reservas -->
    <div class="table-responsive shadow-sm">
        <table class="table table-hover table-bordered mt-3 align-middle">
            <thead class="table-primary text-center">
                <tr>
                    <th>Data</th>
                    <th>Sala</th>
                    <th>Profissional</th>
                    <th>Horário Inicial</th>
                    <th>Horário Final</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {{#if reservas.length}}
                    {{#each reservas}}
                        <tr>
                            <td>{{Data data}}</td>
                            <td>{{sala.nome}}</td>
                            <td>{{profissionalNome}}</td>
                            <td>{{horarioInicial}}</td>
                            <td>{{horarioFinal}}</td>
                            <td class="text-center">
                            {{#if this.podeEditar}}
                                <a href="/reservas/{{id}}/edit" class="btn btn-warning btn-sm mx-1 shadow-sm">
                                    <i class="bi bi-pencil-square"></i> Editar
                                </a>
                                <form action="/reservas/{{id}}?_method=DELETE" method="POST" class="d-inline">
                                    <input type="hidden" name="_csrf" value="{{csrfToken}}">
                                    <button type="submit" class="btn btn-danger btn-sm mx-1 shadow-sm" onclick="return confirm('Você tem certeza que deseja deletar esta reserva?');">
                                        <i class="bi bi-trash"></i> Deletar
                                    </button>
                                </form>
                            {{/if}}
                            </td>
                        </tr>
                    {{/each}}
                {{else}}
                    <tr>
                        <td colspan="6" class="text-center">
                            <div class="alert alert-info" role="alert">
                                Nenhuma reserva encontrada.
                            </div>
                        </td>
                    </tr>
                {{/if}}
            </tbody>
        </table>
    </div>

    <!-- Botão para Alternar o Calendário -->
    <div class="d-flex justify-content-end mb-3">
        <button id="toggleCalendar" class="btn btn-primary">
            <i class="bi bi-calendar"></i> Mostrar/Ocultar Calendário
        </button>
    </div>

    <!-- Elemento do Calendário -->
    <div id="calendar"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const calendarEl = document.getElementById('calendar');
    const toggleCalendarBtn = document.getElementById('toggleCalendar');

    if (!calendarEl) {
        console.error("Elemento de calendário não encontrado!");
        return;
    }

    // Começa com o calendário oculto
    calendarEl.style.display = "none";

    // Função para gerar cores consistentes baseadas em uma string
    function generateColorFromString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const h = Math.abs(hash % 360);
        return `hsl(${h}, 70%, 50%)`;
    }

    // Função para obter cor do profissional
    function getProfessionalColor(profissionalId, profissionalNome) {
        if (!profissionalColors[profissionalId]) {
            profissionalColors[profissionalId] = generateColorFromString(profissionalId + profissionalNome);
        }
        return profissionalColors[profissionalId];
    }

    // Objeto para armazenar as cores dos profissionais
    const profissionalColors = {};

    // Formatando os eventos
    const events = [
        {{#each reservas}}
        {
            title: '{{this.sala.nome}} - {{this.profissionalNome}}',
            start: '{{this.data}}T{{this.horarioInicial}}',
            end: '{{this.data}}T{{this.horarioFinal}}',
            backgroundColor: getProfessionalColor('{{this.profissionalId}}', '{{this.profissionalNome}}'),
            borderColor: getProfessionalColor('{{this.profissionalId}}', '{{this.profissionalNome}}'),
            textColor: '#fff',
            extendedProps: {
                sala: '{{this.sala.nome}}',
                profissional: '{{this.profissionalNome}}',
                horarioInicial: '{{this.horarioInicial}}',
                horarioFinal: '{{this.horarioFinal}}'
            }
        },
        {{/each}}
    ];

    // Formatando os horários para exibição
    events.forEach(event => {
        try {
            const startTime = moment(event.start).format('HH:mm');
            const endTime = moment(event.end).format('HH:mm');
            event.title = `${event.extendedProps.sala} - ${startTime} até ${endTime}`;
        } catch (e) {
            console.error("Erro ao formatar horário do evento:", event, e);
        }
    });

    // Inicializando o calendário
    const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        locale: 'pt-br',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        events: events,
        eventTimeFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        },
        eventClick: function(info) {
            try {
                const startTime = moment(info.event.start).format('HH:mm');
                const endTime = moment(info.event.end).format('HH:mm');
                const eventDate = moment(info.event.start).format('DD/MM/YYYY');
                
                Swal.fire({
                    title: `Reserva - ${info.event.extendedProps.sala}`,
                    html: `
                        <p><strong>Profissional:</strong> ${info.event.extendedProps.profissional}</p>
                        <p><strong>Data:</strong> ${eventDate}</p>
                        <p><strong>Horário:</strong> ${startTime} - ${endTime}</p>
                    `,
                    icon: 'info',
                    confirmButtonText: 'Fechar'
                });
            } catch (e) {
                console.error("Erro ao exibir detalhes do evento:", e);
                Swal.fire({
                    title: 'Erro',
                    text: 'Ocorreu um erro ao exibir os detalhes da reserva',
                    icon: 'error'
                });
            }
        },
        eventDidMount: function(info) {
            // Adaptação para telas pequenas
            if (window.innerWidth < 768) {
                info.el.title = info.event.title;
                info.el.innerHTML = info.event.extendedProps.sala;
            }
        },
        height: 'auto',
        contentHeight: 'auto'
    });

    calendar.render();

    // Botão para mostrar/ocultar calendário
    toggleCalendarBtn.addEventListener('click', function() {
        if (calendarEl.style.display === "none") {
            calendarEl.style.display = "block";
            calendar.updateSize();
            toggleCalendarBtn.innerHTML = '<i class="bi bi-calendar"></i> Ocultar Calendário';
        } else {
            calendarEl.style.display = "none";
            toggleCalendarBtn.innerHTML = '<i class="bi bi-calendar"></i> Mostrar Calendário';
        }
    });

    // Ajuste responsivo
    function handleResponsive() {
        try {
            if (window.innerWidth < 768) {
                calendar.changeView('timeGridDay');
            } else {
                calendar.changeView('dayGridMonth');
            }
            calendar.updateSize();
        } catch (e) {
            console.error("Erro no redimensionamento:", e);
        }
    }

    // Configuração inicial
    handleResponsive();
    window.addEventListener('resize', handleResponsive);
});
</script>

</body>
</html>