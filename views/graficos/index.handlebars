<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Estatísticas</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>       
    
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f6f9;
        color: #333;
    }
    header {
        background-color: #2c3e50;
        color: white;
        padding: 20px;
        text-align: center;
        font-size: 1.5rem;
        font-weight: bold;
    }
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 20px auto;
    }
    .totals {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: space-between;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .totals div {
        flex: 1 1 200px;
        text-align: center;
        font-size: 1.2rem;
        font-weight: bold;
        color: #2c3e50;
    }
    .chart-container {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    canvas {
        width: 100% !important;
        height: auto !important;
    }
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    th, td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
    }
    th {
        background-color: #3498db;
        color: white;
        text-transform: uppercase;
    }
    .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Ajuste aqui */
        gap: 50px;
    }
    h3 {
        margin-bottom: 20px;
        margin-top: 30px;
    }
    @media (max-width: 768px) {
        .totals {
            flex-direction: column;
        }
        .totals div {
            flex: 1 1 50px;
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            color: #2c3e50;
        }
        .chart-container {
            padding: 10px;
            width: 100%; /* Ajuste para telas menores */
        }
    }
  </style>
</head>
<body>
<div class="container">
    <div class="totals">
        <div>Total de Pacientes: {{totalPacientes}}</div>
        <div>Total de Encaminhamentos: {{totalEncaminhamentos}}</div>
        <div>Total de Atendimentos: {{totalAtendimentos}}</div>
    </div>

    <div class="charts-grid">
        <!-- Gráfico de Pacientes por Período -->
        <div>
            <h3>Pacientes por Período</h3>
            <div class="chart-container">
                <canvas id="pacientesChart"></canvas>
            </div>
        </div>

        <!-- Gráfico de Encaminhamentos por Período -->
        <div>
            <h3>Encaminhamentos por Período</h3>
            <div class="chart-container">
                <canvas id="encaminhamentosChart"></canvas>
            </div>
        </div>

        <!-- Gráfico de Atendimentos por Período -->
        <div>
            <h3>Atendimentos por Período</h3>
            <div class="chart-container">
                <canvas id="atendimentosChart"></canvas>
            </div>
        </div>

        <!-- Gráfico de Pacientes por Status -->
        <div>
            <h3>Pacientes por Status</h3>
            <div class="chart-container">
                <canvas id="statusChart"></canvas>
            </div>
        </div>

        <!-- Gráfico de Atendimentos por Profissional -->
        <div>
            <h3>Atendimentos por Profissional</h3>
            <div class="chart-container">
                <canvas id="profissionaisChart"></canvas>
            </div>
        </div>
    </div>
</div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Passar dados dinâmicos do Handlebars para JavaScript
      const pacientesLabels = JSON.parse('{{{json pacientesLabels}}}');
      const pacientesData = JSON.parse('{{{json pacientesData}}}');
      const encaminhamentosLabels = JSON.parse('{{{json encaminhamentosLabels}}}');
      const encaminhamentosData = JSON.parse('{{{json encaminhamentosData}}}');
      const atendimentosLabels = JSON.parse('{{{json atendimentosLabels}}}');
      const atendimentosData = JSON.parse('{{{json atendimentosData}}}');
      const profissionaisLabels = JSON.parse('{{{json profissionaisLabels}}}');
      const profissionaisData = JSON.parse('{{{json profissionaisData}}}');
      const statusLabels = JSON.parse('{{{json statusLabels}}}');
      const statusData = JSON.parse('{{{json statusData}}}');

      // Configurações comuns para os gráficos
      const commonOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top",
            labels: {
              font: {
                size: 14,
              },
            },
          },
          tooltip: {
            enabled: true,
            backgroundColor: "rgba(0, 0, 0, 0.8)",
            titleFont: { size: 14 },
            bodyFont: { size: 12 },
            callbacks: {
              label: (context) => `Quantidade: ${context.raw}`,
            },
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: { color: "rgba(200, 200, 200, 0.5)" },
            ticks: { stepSize: 1 },
          },
          x: {
            grid: { color: "rgba(200, 200, 200, 0.5)" },
          },
        },
        animation: {
          duration: 1000,
          easing: "easeInOutQuart",
        },
      };


      const generateColors = (numColors) => {
          const colors = [];
          for (let i = 0; i < numColors; i++) {
              const r = Math.floor(Math.random() * 255);
              const g = Math.floor(Math.random() * 255);
              const b = Math.floor(Math.random() * 255);
              colors.push(`rgba(${r}, ${g}, ${b}, 0.6)`); // Cor com opacidade
          }
          return colors;
      };

      // Gerar cores dinâmicas
      const barColors = generateColors(pacientesLabels.length);
      const pieColors = generateColors(statusLabels.length);

      // Gráfico de Pacientes
      new Chart(document.getElementById("pacientesChart").getContext("2d"), {
          type: "bar",
          data: {
              labels: pacientesLabels,
              datasets: [{
                  label: "Pacientes",
                  data: pacientesData,
                  backgroundColor: barColors, // Usar cores geradas
                  borderColor: barColors.map(color => color.replace('0.6', '1')), // Ajustar opacidade da borda
                  borderWidth: 1,
              }],
          },
          options: commonOptions,
      });

      // Gráfico de Encaminhamentos
      new Chart(document.getElementById("encaminhamentosChart").getContext("2d"), {
          type: "bar",
          data: {
              labels: encaminhamentosLabels,
              datasets: [{
                  label: "Encaminhamentos",
                  data: encaminhamentosData,
                  backgroundColor: barColors, // Usar cores geradas
                  borderColor: barColors.map(color => color.replace('0.6', '1')), // Ajustar opacidade da borda
                  borderWidth: 1,
              }],
          },
          options: commonOptions,
      });

      // Gráfico de Atendimentos
      new Chart(document.getElementById("atendimentosChart").getContext("2d"), {
          type: "bar",
          data: {
              labels: atendimentosLabels,
              datasets: [{
                  label: "Atendimentos",
                  data: atendimentosData,
                  backgroundColor: barColors, // Usar cores geradas
                  borderColor: barColors.map(color => color.replace('0.6', '1')), // Ajustar opacidade da borda
                  borderWidth: 1,
              }],
          },
          options: commonOptions,
      });

      // Gráfico de Status
      new Chart(document.getElementById("statusChart").getContext("2d"), {
          type: "bar",
          data: {
              labels: statusLabels,
              datasets: [{
                  label: "Pacientes por Status",
                  data: statusData,
                  backgroundColor: pieColors, // Usar cores geradas
                  borderColor: pieColors.map(color => color.replace('0.6', '1')), // Ajustar opacidade da borda
                  borderWidth: 1,
              }],
          },
          options: commonOptions,
      });

      // Gráfico de Profissionais
      new Chart(document.getElementById("profissionaisChart").getContext("2d"), {
          type: "bar",
          data: {
              labels: profissionaisLabels,
              datasets: [{
                  label: "Atendimentos por Profissional",
                  data: profissionaisData,
                  backgroundColor: barColors, // Usar cores geradas
                  borderColor: barColors.map(color => color.replace('0.6', '1')), // Ajustar opacidade da borda
                  borderWidth: 1,
              }],
          },
          options: commonOptions,
      });

    });
  </script>
</body>
</html>