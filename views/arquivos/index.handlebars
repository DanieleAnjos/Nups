<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meus Arquivos</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/CSS/Principal.css">
    <style>
        .container {
            max-width: 1500px;
            margin: 0 auto;
            padding: 20px;
        }

        @media (max-width: 768px) {
            .table-responsive {
                overflow-x: auto;
            }
            
            .btn-sm {
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
            }
        }

        /* Estilos para o modal de pré-visualização */
        .preview-modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }

        .preview-content {
            margin: auto;
            display: block;
            width: 90%;
            max-width: 1200px;
            max-height: 90vh;
            margin-top: 5vh;
        }

        .preview-container {
            position: relative;
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .close-preview {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #fff;
            font-size: 40px;
            font-weight: bold;
            cursor: pointer;
            z-index: 10;
        }

        .file-preview {
            width: 100%;
            height: 70vh;
            border: none;
        }

        .unsupported-file {
            padding: 20px;
            text-align: center;
            color: #666;
        }

        .text-preview {
            white-space: pre-wrap;
            font-family: monospace;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            max-height: 60vh;
            overflow-y: auto;
        }

        /* Estilos para botões de ação */
        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        /* Ajustes para mobile */
        @media (max-width: 576px) {
            .preview-content {
                width: 95%;
                margin-top: 2vh;
            }
            
            .preview-container {
                padding: 15px;
            }
            
            .close-preview {
                right: 15px;
                font-size: 30px;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <!-- Título da página -->
        <h2 class="text-center text-primary my-4">Arquivos</h2>

        <!-- Botão Adicionar Novo Arquivo -->
        <div class="d-flex justify-content-end mb-3">
            <a href="/arquivos/create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Adicionar Novo Arquivo
            </a>
        </div>

        <!-- Tabela de Arquivos -->
        <div class="table-responsive">
            <table class="table table-hover table-striped table-bordered mt-3">
                <thead class="table-primary">
                    <tr class="text-center">
                        <th>Nome</th>
                        <th>Descrição</th>
                        <th>Data de Criação</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each arquivos}}
                        <tr>
                            <td>{{this.nome}}</td>
                            <td>{{this.descricao}}</td>
                            <td>{{formatDate this.createdAt}}</td>
                            <td class="text-center">
                                <!-- Botão de visualização com pré-visualização -->
                                <button class="btn btn-info btn-sm preview-btn" 
                                        data-filename="{{this.nome}}"
                                        data-filepath="{{this.caminho}}">
                                    <i class="bi bi-eye"></i> Visualizar
                                </button>
                                <a href="/arquivos/edit/{{this.id}}" class="btn btn-warning btn-sm mx-1" aria-label="Editar">
                                    <i class="bi bi-pencil-square"></i> Editar
                                </a>
                                <form action="/arquivos/delete/{{this.id}}" method="POST" style="display:inline;">
                                    <input type="hidden" name="_csrf" value="{{csrfToken}}">
                                    <button type="submit" class="btn btn-danger btn-sm mx-1" onclick="return confirm('Tem certeza que deseja excluir este arquivo?');" aria-label="Excluir">
                                        <i class="bi bi-trash"></i> Excluir
                                    </button>
                                </form>
                            </td>
                        </tr>
                    {{else}}
                        <tr>
                            <td colspan="4" class="text-center text-muted">Nenhum arquivo encontrado.</td>
                        </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>

        <!-- Modal de Pré-visualização -->
        <div id="previewModal" class="preview-modal">
            <span class="close-preview">&times;</span>
            <div class="preview-container">
                <h4 id="preview-title" class="mb-3"></h4>
                <div id="preview-content">
                    <!-- Conteúdo será inserido dinamicamente via JavaScript -->
                </div>
                <div class="action-buttons" id="preview-actions">
                    <!-- Botões de ação serão inseridos aqui -->
                </div>
            </div>
        </div>

        <!-- Bootstrap 5 JS -->
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

        <script>
        document.addEventListener('DOMContentLoaded', () => {
            {{#if error_msg}}
                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: '{{error_msg}}',
                    confirmButtonText: 'Ok'
                });
            {{/if}}
            
            {{#if success_msg}}
                Swal.fire({
                    icon: 'success',
                    title: 'Sucesso',
                    text: '{{success_msg}}',
                    confirmButtonText: 'Ok'
                });
            {{/if}}

            // Elementos do DOM
            const previewModal = document.getElementById('previewModal');
            const previewContent = document.getElementById('preview-content');
            const previewTitle = document.getElementById('preview-title');
            const previewActions = document.getElementById('preview-actions');
            const closeBtn = document.querySelector('.close-preview');
            const previewBtns = document.querySelectorAll('.preview-btn');

            // Função para obter o tipo de arquivo pela extensão
            function getFileType(filename) {
                if (!filename) return 'other';
                
                const extension = filename.split('.').pop().toLowerCase();
                const imageTypes = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'];
                const docTypes = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'csv'];
                const videoTypes = ['mp4', 'webm', 'ogg', 'mov'];
                const audioTypes = ['mp3', 'wav', 'ogg', 'm4a'];
                
                if (imageTypes.includes(extension)) return 'image';
                if (extension === 'pdf') return 'pdf';
                if (docTypes.includes(extension)) return 'document';
                if (videoTypes.includes(extension)) return 'video';
                if (audioTypes.includes(extension)) return 'audio';
                return 'other';
            }

            // Função para criar visualização alternativa
            function createAlternativePreview(filepath, filename) {
                return `
                    <div class="preview-alternative">
                        <i class="bi bi-file-earmark"></i>
                        <h5>Pré-visualização não disponível</h5>
                        <p>Este tipo de arquivo não pode ser exibido diretamente no navegador.</p>
                        <div class="action-buttons">
                            <a href="${filepath}" download="${filename}" class="btn btn-primary">
                                <i class="bi bi-download"></i> Baixar Arquivo
                            </a>
                            <a href="${filepath}" target="_blank" class="btn btn-secondary">
                                <i class="bi bi-box-arrow-up-right"></i> Abrir Externamente
                            </a>
                        </div>
                    </div>
                `;
            }

            // Função para criar visualização de PDF com abas
            function createPdfPreview(filepath, filename) {
                const pdfEmbedUrl = `${filepath}#toolbar=0&navpanes=0&scrollbar=0`;
                const googleViewerUrl = `https://docs.google.com/viewer?url=${encodeURIComponent(filepath)}&embedded=true`;
                
                return `
                    <div class="preview-tabs">
                        <div class="preview-tab active" data-tab="native">Visualizador do Navegador</div>
                        <div class="preview-tab" data-tab="google">Google Docs Viewer</div>
                    </div>
                    <div class="preview-iframe-container">
                        <iframe id="native-preview" src="${pdfEmbedUrl}" class="preview-iframe" style="display: block;"></iframe>
                        <iframe id="google-preview" src="${googleViewerUrl}" class="preview-iframe" style="display: none;"></iframe>
                    </div>
                    <p class="text-muted mt-2">Se o PDF não carregar, tente alternar entre as abas acima ou <a href="${filepath}" target="_blank">abra em nova janela</a></p>
                `;
            }

            // Abrir modal de pré-visualização
            previewBtns.forEach(btn => {
                btn.addEventListener('click', async function() {
                    const filepath = this.getAttribute('data-filepath');
                    const filename = this.getAttribute('data-filename');
                    const filetype = getFileType(filename);
                    
                    previewTitle.textContent = filename;
                    previewContent.innerHTML = '<div class="text-center my-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Carregando...</span></div><p class="mt-2">Carregando pré-visualização...</p></div>';
                    previewActions.innerHTML = '';
                    
                    previewModal.style.display = "block";
                    
                    try {
                        // Montar pré-visualização conforme o tipo de arquivo
                        switch(filetype) {
                            case 'image':
                                previewContent.innerHTML = `
                                    <div class="preview-iframe-container">
                                        <img src="${filepath}" class="preview-iframe" style="object-fit: contain;" alt="Pré-visualização de ${filename}" 
                                             onerror="this.onerror=null;this.parentElement.innerHTML='${createAlternativePreview(filepath, filename)}'">
                                    </div>`;
                                break;
                                
                            case 'pdf':
                                previewContent.innerHTML = createPdfPreview(filepath, filename);
                                // Adiciona evento para alternar entre abas
                                setTimeout(() => {
                                    document.querySelectorAll('.preview-tab').forEach(tab => {
                                        tab.addEventListener('click', function() {
                                            document.querySelectorAll('.preview-tab').forEach(t => t.classList.remove('active'));
                                            this.classList.add('active');
                                            
                                            document.getElementById('native-preview').style.display = 'none';
                                            document.getElementById('google-preview').style.display = 'none';
                                            
                                            const tabType = this.getAttribute('data-tab');
                                            document.getElementById(`${tabType}-preview`).style.display = 'block';
                                        });
                                    });
                                }, 100);
                                break;
                                
                            case 'document':
                                if (filename.endsWith('.txt') || filename.endsWith('.csv')) {
                                    try {
                                        const response = await fetch(filepath);
                                        if (!response.ok) throw new Error('Erro ao carregar arquivo');
                                        const text = await response.text();
                                        previewContent.innerHTML = `
                                            <div class="text-preview">${text}</div>`;
                                    } catch (error) {
                                        previewContent.innerHTML = createAlternativePreview(filepath, filename);
                                    }
                                } else {
                                    previewContent.innerHTML = createAlternativePreview(filepath, filename);
                                }
                                break;
                                
                            case 'video':
                                previewContent.innerHTML = `
                                    <div class="preview-iframe-container">
                                        <video controls class="preview-iframe">
                                            <source src="${filepath}" type="video/${filename.split('.').pop()}">
                                            Seu navegador não suporta vídeos.
                                        </video>
                                    </div>`;
                                break;
                                
                            case 'audio':
                                previewContent.innerHTML = `
                                    <div class="preview-iframe-container" style="display: flex; align-items: center; justify-content: center;">
                                        <audio controls style="width: 100%; max-width: 500px;">
                                            <source src="${filepath}" type="audio/${filename.split('.').pop()}">
                                            Seu navegador não suporta áudio.
                                        </audio>
                                    </div>`;
                                break;
                                
                            default:
                                previewContent.innerHTML = createAlternativePreview(filepath, filename);
                        }
                    } catch (error) {
                        console.error('Erro ao carregar pré-visualização:', error);
                        previewContent.innerHTML = createAlternativePreview(filepath, filename);
                    }
                });
            });

            // Fechar modal
            closeBtn.addEventListener('click', () => {
                previewModal.style.display = "none";
            });

            // Fechar ao clicar fora do conteúdo
            window.addEventListener('click', (event) => {
                if (event.target === previewModal) {
                    previewModal.style.display = "none";
                }
            });

            // Fechar com tecla ESC
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && previewModal.style.display === 'block') {
                    previewModal.style.display = 'none';
                }
            });
        });
    </script>s
    </div>
</body>
</html>