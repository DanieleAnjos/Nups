<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Bootstrap CSS -->
  <!-- Icones do Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">


<!-- jQuery (necess√°rio para o Select2) -->
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>

<!-- Select2 JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <!-- Select2 CSS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

</head>
<body>

  <div class="container my-5">
    <form action="/encaminhamentos" method="POST" class="p-4 bg-light rounded shadow-sm">
    {{#if success_msg}}
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          Swal.fire({
            icon: 'success',
            title: 'Sucesso',
            text: '{{success_msg}}',
            confirmButtonText: 'Ok'
          });
        });
      </script>
    {{/if}}

    <!-- Mensagens de erro -->
    {{#if error_msg}}
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          Swal.fire({
            icon: 'error',
            title: 'Erro',
            text: '{{error_msg}}',
            confirmButtonText: 'Ok'
          });
        });
      </script>
    {{/if}}

        <h2 class="text-center my-4 text-primary">Novo Encaminhamento</h2>
        <!-- Nome do Paciente -->
        <div class="mb-4">
          <label for="nomePaciente" class="form-label">Nome do Servidor:</label>
          <select name="nomePaciente" id="nomePaciente" class="form-select select2" required>
            <option value="">üîç Digite para buscar um servidor</option>
            {{#each pacientes}}
              <option value="{{this.nome}}" data-matricula="{{this.matricula}}">{{this.nome}}</option>
            {{/each}}
          </select>
        </div>

        <!-- Matr√≠cula do Paciente -->
        <div class="mb-4">
          <label for="matriculaPaciente" class="form-label">Matr√≠cula do Servidor:</label>
          <input type="text" name="matriculaPaciente" id="matriculaPaciente" class="form-control" required>
        </div>

        <!-- Numero do Processo -->
        <div class="mb-4">
          <label for="numeroProcesso" class="form-label">N√∫mero do Processo:</label>
            <input type="text" name="numeroProcesso" id="numeroProcesso" class="form-control" 
            title="O n√∫mero do processo deve estar no formato 000000/0000">
        </div>

        <!-- Telefone do Paciente -->
        <div class="mb-4">
          <label for="telefonePaciente" class="form-label">Telefone do Servidor:</label>
          <input type="text" name="telefonePaciente" id="telefonePaciente" class="form-control" required placeholder="(99) 99999-9999">
          <div class="invalid-feedback">Informe um telefone v√°lido no formato (XX) XXXXX-XXXX.</div>
        </div>

        <div class="mb-4">
          <label for="assuntoAcolhimento" class="form-label">Assunto do Acolhimento:</label>
          <select class="form-control" name="assuntoAcolhimento" id="assuntoAcolhimento" required>
            <option value="">Selecione um assunto</option>
            <option value="Acolhimento de disparo">Acolhimento de disparo</option>
            <option value="Acolhimento psicossocial">Acolhimento psicossocial</option>
            <option value="Exposi√ß√£o negativa na m√≠dia">Exposi√ß√£o negativa na m√≠dia</option>
          </select>
        </div>

        <!-- Descri√ß√£o -->
        <div class="mb-4">
          <label for="descricao" class="form-label">Descri√ß√£o:</label>
          <textarea name="descricao" id="descricao" class="form-control" rows="4" required></textarea>
        </div>

<!-- Profissional de Envio (oculto) -->
<div class="mb-4" style="display: none;">
  <label for="profissionalIdEnvio" class="form-label">Profissional de Envio:</label>
  <input type="hidden" name="profissionalIdEnvio" id="profissionalIdEnvio" value="{{profissionalIdEnvio}}">
</div>

        <!-- Profissional de Recebimento (alterado para 'select') -->
<!-- Profissional de Recebimento -->
        <div class="mb-4">
          <label for="profissionalIdRecebido" class="form-label">Profissional de Recebimento:</label>
          <select name="profissionalIdRecebido" id="profissionalIdRecebido" class="form-control" required>
            <option value="">Selecione um profissional</option>
            <!-- Lista de profissionais ser√° preenchida pelo JavaScript -->
          </select>
        </div>

        <!-- Bot√£o de Envio -->
        <div class="text-center mt-4">
          <button type="submit" class="btn btn-success btn-lg">
            <i class="bi bi-check-circle"></i> Gerar Encaminhamento
          </button>
        </div>
    </form>
  </div>


<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <script>


$(document).ready(function() {
  // Check if Select2 is loaded
  if ($.fn.select2) {
    $('#nomePaciente').select2({
      placeholder: "üîç Digite para buscar um servidor", // Placeholder text
      allowClear: true, // Allows clearing the selection
      tags: true, // Allows adding new tags
      width: '100%' // Set the width of the field
    });
  } else {
    console.error('Select2 is not loaded properly');
  }

  // Update matricula when a patient is selected
  $('#nomePaciente').on('change', function () {
    const selectedOption = $(this).find(':selected');
    const matricula = selectedOption.data('matricula');
    $('#matriculaPaciente').val(matricula); // Populate the matricula field
  });
});


document.getElementById('numeroProcesso').addEventListener('input', function (event) {
    const input = event.target;
    let value = input.value.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos

    // Aplica a formata√ß√£o se houver pelo menos 7 d√≠gitos (6 antes da barra e 1 depois)
    if (value.length > 6) {
        value = value.slice(0, 6) + '/' + value.slice(6, 10);
    }

    // Atualiza o valor do input
    input.value = value;

    // Se o campo estiver vazio, remove qualquer valida√ß√£o
    if (value === "") {
        input.setCustomValidity(""); // Nenhuma mensagem de erro
        input.classList.remove("is-invalid");
        return;
    }

    // Valida o formato do n√∫mero do processo
    if (!/^\d{6}\/\d{4}$/.test(value)) {
        input.setCustomValidity("O n√∫mero do processo deve estar no formato 000000/0000.");
        input.classList.add("is-invalid");
    } else {
        input.setCustomValidity(""); // Limpa a mensagem de erro
        input.classList.remove("is-invalid");
    }
});


    document.getElementById('telefonePaciente').addEventListener('input', function (event) {
      const input = event.target;
      let value = input.value.replace(/\D/g, ''); // Remove tudo que n√£o for n√∫mero

      // Aplica a m√°scara de telefone (formato brasileiro)
      if (value.length > 11) {
        value = value.slice(0, 11);
      }
      
      if (value.length > 10) {
        value = value.replace(/^(\d{2})(\d{5})(\d{4})$/, "($1) $2-$3"); // Formato celular
      } else if (value.length > 9) {
        value = value.replace(/^(\d{2})(\d{4})(\d{4})$/, "($1) $2-$3"); // Formato fixo
      }

      input.value = value;

      // Valida√ß√£o do n√∫mero
      const telefoneRegex = /^\(\d{2}\) \d{4,5}-\d{4}$/;
      if (!telefoneRegex.test(value)) {
        input.setCustomValidity("Informe um telefone v√°lido no formato (XX) XXXXX-XXXX.");
        input.classList.add("is-invalid");
      } else {
        input.setCustomValidity("");
        input.classList.remove("is-invalid");
      }
    });

    function buscarPacientePorNome() {
      const nomePaciente = document.getElementById('nomePaciente').value;
      
      if (nomePaciente.length > 3) {  // A busca s√≥ √© realizada ap√≥s digitar 3 caracteres
        $.ajax({
          url: '/encaminhamentos/buscarPaciente?nome=' + nomePaciente,  // Endpoint para buscar paciente por nome
          method: 'GET',
          success: function(data) {
            $('#matriculaPaciente').val(data.matricula);  // Preenche a matr√≠cula
            $('#pacienteId').val(data.id);  // Preenche o ID do paciente
          },
          error: function() {
            $('#matriculaPaciente').val('');  // Limpa a matr√≠cula
            $('#pacienteId').val('');  // Limpa o ID do paciente
            alert('Paciente n√£o encontrado!');
          }
        });
      }
    }

    function buscarPacientePorMatricula() {
      const matriculaPaciente = document.getElementById('matriculaPaciente').value;
      
      if (matriculaPaciente.length > 0) {  // A busca s√≥ √© realizada se a matr√≠cula for informada
        $.ajax({
          url: '/encaminhamentos/buscarPaciente?matricula=' + matriculaPaciente,  // Endpoint para buscar paciente por matr√≠cula
          method: 'GET',
          success: function(data) {
            $('#nomePaciente').val(data.nome);  // Preenche o nome do paciente
            $('#pacienteId').val(data.id);  // Preenche o ID do paciente
          },
          error: function() {
            $('#nomePaciente').val('');  // Limpa o nome do paciente
            $('#pacienteId').val('');  // Limpa o ID do paciente
            alert('Paciente n√£o encontrado!');
          }
        });
      }
    }

    document.addEventListener("DOMContentLoaded", function () {
      const assuntoSelect = document.getElementById("assuntoAcolhimento");
      const profissionalSelect = document.getElementById("profissionalIdRecebido");

      // Dados dos profissionais (passados do backend para o frontend)
      const profissionaisPsicologia = [
          {{#each profissionaisPsicologia}}
              { id: "{{this.id}}", nome: "{{this.nome}}" },
          {{/each}}
      ];

      const profissionaisServicoSocial = [
          {{#each profissionaisServicoSocial}}
              { id: "{{this.id}}", nome: "{{this.nome}}" },
          {{/each}}
      ];

      function atualizarListaProfissionais() {
          const assuntoSelecionado = assuntoSelect.value;

          // Determinar quais profissionais exibir
          let profissionais = [];
          if (assuntoSelecionado === "Acolhimento de disparo" || assuntoSelecionado === "Exposi√ß√£o negativa na m√≠dia") {
              profissionais = profissionaisPsicologia;
          } else {
              profissionais = profissionaisServicoSocial;
          }

          // Limpar as op√ß√µes anteriores
          profissionalSelect.innerHTML = '<option value="">Selecione um profissional</option>';

          // Adicionar os novos profissionais ao select
          profissionais.forEach(profissional => {
              const option = document.createElement("option");
              option.value = profissional.id;
              option.textContent = profissional.nome;
              profissionalSelect.appendChild(option);
          });
      }

      // Executar a fun√ß√£o ao mudar o assunto
      assuntoSelect.addEventListener("change", atualizarListaProfissionais);

      // Executar ao carregar a p√°gina (caso j√° tenha um assunto pr√©-selecionado)
      atualizarListaProfissionais();
    });
  </script>

</body>
</html>

<style>

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }


      .container {
    max-width: 900px;
    margin-top: 40px;
  }

</style>